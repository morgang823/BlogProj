@model BlogProj.Models.Post
@using BlogProj.Services
@using Microsoft.AspNetCore.Identity
@inject UserManager<BlogUser> userManager
@inject IBlogFileService _fileService
@{
    ViewData["Title"] = "Details";
}
<div>
    <h4 class="text-white">Blog: @Html.DisplayFor(model => model.Title)</h4>
    <hr />
    <img id="ProfileImage" class="img-fluid align-items-center align-self-center justify-content-center" src="@_fileService.DecodeImage(Model.ImageData, Model.ContentType)" />
    <dl class="row text-white font-weight-bold">
        <dt class="col-sm-2">
            <h3 class="text-white">@Html.DisplayNameFor(model => model.Title):</h3>
        </dt>
        <dd class="col-sm-10">
            <h3 class="text-white">@Html.DisplayFor(model => model.Title)</h3>
        </dd>
        <dt class="col-sm-2">
            <h3 class="text-white">@Html.DisplayNameFor(model => model.Abstract):</h3>
        </dt>
        <dd class="col-sm-10">
            <h3 class="text-white">@Html.DisplayFor(model => model.Abstract)</h3>
        </dd>
        <dt class="col-sm-2">
            <h3 class="text-white">@Html.DisplayNameFor(model => model.Created):</h3>
        </dt>
        <dd class="col-sm-10">
            <h3 class="text-white">@Html.DisplayFor(model => model.Created)</h3>
        </dd>
        <dt class="col-sm-2">
         <h3 class="text-white">@Html.DisplayNameFor(model => model.Updated):</h3>
        </dt>
        <dd class="col-sm-10">
            <h3 class="text-white">@Html.DisplayFor(model => model.Updated)</h3>
        </dd>
    </dl>
</div>
<main>
    <div class="container container-fluid bg-white">
        <div class="row text-black-50 form-control-lg">
            <h3>@Html.Raw(Model.Content)</h3>
        </div>
    </div>
</main>

<hr />

@*Task 1: Prompt the anonymous user to login to add a comment*@
@if (!User.Identity.IsAuthenticated)
{
    <a class="btn-warning btn-block btn-lg rounded" asp-area="Identity"
       asp-page="/Account/Login"
       asp-route-returnUrl="@Url.Action("Details", "Posts", new { Slug = Model.Slug})">Login to add a comment</a>
}
else
{
    <div class="row">
        <div class="col">
            <h3 class="text-center text-white">ADD COMMENT</h3>
            <form asp-action="Create" asp-controller="Comments" method="post">
                <input type="hidden" name="PostId" value="@Model.Id" />
                <textarea name="Body" rows="10" class="form-control text-body"></textarea>
                <button class="btn btn-warning btn-block btn-sm" type="submit">Submit</button>
            </form>
        </div>
    </div>
}

<hr />
<div class="btn-sm btn-dark btn-block">@Model.Comments.Count Comment(s)</div>
@foreach (var comment in Model.Comments.OrderByDescending(c => c.Created))
{
    <div class="row">
        <div class="col">
            <div class="media border p-3 bg-light">
                <img src="@_fileService.DecodeImage(comment.Author.ImageData, comment.Author.ContentType)" alt="@comment.Author.FullName" class="mr-3 mt-3 rounded-circle" style="width:60px;">
                <div class="media-body">
                    <h4>@comment.Author.FullName <small><i>Posted on @comment.Created.ToString("MMM dd, yyyy")</i></small></h4>
                    <p>@comment.Body</p>
                </div>
            </div>
        </div>
    </div>
}

@*@foreach (var comment in Model.Comments.OrderByDescending(c => c.Created))
            {
                @Html.Raw(comment.CommentBody)
    <p class="text-sm-center">@comment.Bloguser.FirstName</p>
    if(User.IsInRole("Admin") || User.IsInRole.("Moderator") || (comment.Moderated is null && userManager.GetUserId(User) == comment.AuthorId)
                {

                }
}*@